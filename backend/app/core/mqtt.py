# app/core/mqtt.py

import json
import ssl
import logging
import os
from datetime import datetime

# ---  C√ÅC TH∆Ø VI·ªÜN GHI FILE EXCEL ---
from openpyxl import Workbook, load_workbook
from openpyxl.utils import get_column_letter
# ------------------------------------

# --- TH√äM C√ÅC TH∆Ø VI·ªÜN GOOGLE SHEETS API M·ªöI ---
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
# ----------------------------------------------

logger = logging.getLogger(__name__)
mqtt_client = None

# ‚úÖ T·∫°o ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn th∆∞ m·ª•c logs (gi·ªØ l·∫°i n·∫øu b·∫°n mu·ªën ghi log kh√°c)
BASE_DIR = os.path.dirname(os.path.dirname(__file__))  # tr·ªè t·ªõi app/
LOG_DIR = os.path.join(BASE_DIR, "logs")
os.makedirs(LOG_DIR, exist_ok=True)

# ‚úÖ ƒê∆∞·ªùng d·∫´n t·ªõi file Excel log
EXCEL_FILE = os.path.join(LOG_DIR, "mqtt_data.xlsx")

# ‚úÖ ƒê∆∞·ªùng d·∫´n t·ªõi file credentials.json
# ƒê·∫∑t file credentials.json trong th∆∞ m·ª•c app/core/ (c√πng c·∫•p v·ªõi mqtt.py)
CREDENTIALS_FILE = os.path.join(os.path.dirname(__file__), "credentials.json")

# ‚úÖ ID c·ªßa Google Sheet c·ªßa b·∫°n - THAY TH·∫æ B·∫∞NG ID TH·ª∞C C·ª¶A B·∫†N!
# B·∫°n c√≥ th·ªÉ t√¨m th·∫•y ID n√†y trong URL c·ªßa Google Sheet:
# https://docs.google.com/spreadsheets/d/YOUR_SPREADSHEET_ID_HERE/edit
SPREADSHEET_ID = "1_hfhka2P0cM3w5q80MDqNIQ1ut2RzXMJ-T1DNEYzOCc" # <<< THAY TH·∫æ CH·ªñ N√ÄY !!!

def get_mqtt_client():
    global mqtt_client
    if mqtt_client is None:
        from paho.mqtt.client import Client
        mqtt_client = Client()

        mqtt_client.on_connect = on_connect
        mqtt_client.on_message = on_message

        # ƒê∆∞·ªùng d·∫´n ƒë·∫øn ca.pem (ƒë·∫£m b·∫£o file n√†y v·∫´n ƒë√∫ng v·ªã tr√≠)
        cert_path = os.path.join(os.path.dirname(__file__), "certs", "emqxsl_ca.pem")

        # Thi·∫øt l·∫≠p TLS ch·ªâ d√πng CA
        mqtt_client.tls_set(
            ca_certs=cert_path,
            cert_reqs=ssl.CERT_REQUIRED,
            tls_version=ssl.PROTOCOL_TLSv1_2,
        )
        mqtt_client.tls_insecure_set(False)

        # K·∫øt n·ªëi ƒë·∫øn broker
        mqtt_client.connect("scalemodelvn.com", port=8883)
        mqtt_client.loop_start()

    return mqtt_client

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        logger.info("‚úÖ MQTT connected securely with CA cert only")
        client.subscribe("secure/topic")  # Thay topic n·∫øu c·∫ßn
    else:
        logger.error(f"‚ùå MQTT connection failed with code {rc}")

def on_message(client, userdata, msg):
    payload = msg.payload.decode()
    topic = msg.topic
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    logger.info(f"üì© MQTT Message: {topic} -> {payload}")
    # G·ªçi h√†m m·ªõi ƒë·ªÉ ghi v√†o Google Sheet
    log_to_google_sheet(timestamp, topic, payload)
    log_to_excel(timestamp, topic, payload) # G·ªçi l·∫°i h√†m ghi Excel

def log_to_excel(timestamp: str, topic: str, payload: str):
    try:
        # T·∫°o m·ªõi file n·∫øu ch∆∞a t·ªìn t·∫°i
        if not os.path.exists(EXCEL_FILE):
            wb = Workbook()
            ws = wb.active
            ws.title = "MQTT Logs"
            ws.append(["Timestamp", "Topic", "Payload"])
            logger.info(f"‚úÖ ƒê√£ t·∫°o file Excel m·ªõi: {EXCEL_FILE}")
        else:
            wb = load_workbook(EXCEL_FILE)
            ws = wb.active

        # Th√™m d√≤ng d·ªØ li·ªáu m·ªõi
        ws.append([timestamp, topic, payload])

        # Auto-resize c·ªôt (t√πy ch·ªçn, c√≥ th·ªÉ b·ªè qua n·∫øu kh√¥ng c·∫ßn)
        for col in ws.columns:
            max_len = max(len(str(cell.value)) if cell.value else 0 for cell in col)
            col_letter = get_column_letter(col[0].column)
            ws.column_dimensions[col_letter].width = max_len + 2

        wb.save(EXCEL_FILE)
        logger.info(f"‚úÖ ƒê√£ ghi d·ªØ li·ªáu v√†o file Excel c·ª•c b·ªô: {EXCEL_FILE}")
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi ghi v√†o file Excel: {e}")

def log_to_google_sheet(timestamp: str, topic: str, payload: str):
    # Ph·∫°m vi quy·ªÅn m√† ·ª©ng d·ª•ng c·ªßa b·∫°n c·∫ßn
    # Ch·ªâ c·∫ßn quy·ªÅn ghi v√†o Google Sheets
    SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
    creds = None
    try:
        # T·∫£i th√¥ng tin x√°c th·ª±c t·ª´ file JSON
        creds = service_account.Credentials.from_service_account_file(
            CREDENTIALS_FILE, scopes=SCOPES)
    except FileNotFoundError:
        logger.error(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file th√¥ng tin x√°c th·ª±c t·∫°i: {CREDENTIALS_FILE}. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n v√† t√™n file.")
        return
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi t·∫£i th√¥ng tin x√°c th·ª±c: {e}")
        return

    try:
        # X√¢y d·ª±ng ƒë·ªëi t∆∞·ª£ng d·ªãch v·ª• Google Sheets API
        service = build('sheets', 'v4', credentials=creds)
        sheet = service.spreadsheets()

        # D·ªØ li·ªáu b·∫°n mu·ªën ghi v√†o Google Sheet
        # M·ªói ph·∫ßn t·ª≠ trong list con l√† m·ªôt √¥ trong h√†ng
        values = [[timestamp, topic, payload]]
        body = {
            'values': values
        }

        # Th·ª±c hi·ªán vi·ªác ghi d·ªØ li·ªáu v√†o Google Sheet
        # range="Sheet1!A1": Ch·ªâ ƒë·ªãnh t√™n sheet (m·∫∑c ƒë·ªãnh l√† Sheet1) v√† √¥ b·∫Øt ƒë·∫ßu (A1)
        # valueInputOption="RAW": D·ªØ li·ªáu ƒë∆∞·ª£c ch√®n nguy√™n vƒÉn, kh√¥ng qua ph√¢n t√≠ch c√∫ ph√°p
        # insertDataOption="INSERT_ROWS": Ch√®n d·ªØ li·ªáu d∆∞·ªõi d·∫°ng h√†ng m·ªõi v√†o cu·ªëi sheet
        result = sheet.values().append(
            spreadsheetId=SPREADSHEET_ID,
            range="Sheet1!A1", # ƒê·∫£m b·∫£o t√™n sheet n√†y kh·ªõp v·ªõi t√™n tab trong Google Sheet c·ªßa b·∫°n
            valueInputOption="RAW",
            insertDataOption="INSERT_ROWS",
            body=body).execute()

        # Log th√¥ng b√°o th√†nh c√¥ng
        logger.info(f"‚úÖ ƒê√£ ghi d·ªØ li·ªáu v√†o Google Sheet: {result.get('updates').get('updatedCells')} √¥ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.")

    except HttpError as err:
        # X·ª≠ l√Ω c√°c l·ªói t·ª´ Google Sheets API (v√≠ d·ª•: l·ªói quy·ªÅn truy c·∫≠p, sheet kh√¥ng t·ªìn t·∫°i)
        logger.error(f"‚ùå L·ªói Google Sheets API: {err}")
    except Exception as e:
        # X·ª≠ l√Ω c√°c l·ªói kh√¥ng mong mu·ªën kh√°c
        logger.error(f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ghi v√†o Google Sheet: {e}")


def publish(topic: str, payload: dict):
    client = get_mqtt_client()
    client.publish(topic, json.dumps(payload))